<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杨小嘿の博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-21T11:32:02.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>杨小嘿</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Algorithms4 习题 1_1_27 详解</title>
    <link href="http://yoursite.com/2017/10/21/Algorithms4-%E4%B9%A0%E9%A2%98-1-1-27-%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/10/21/Algorithms4-习题-1-1-27-详解/</id>
    <published>2017-10-21T07:58:03.000Z</published>
    <updated>2017-10-21T11:32:02.000Z</updated>
    
    <content type="html"><![CDATA[<p> 描述: <code>二项分布</code> 估计用以下代码计算 <code>binomial(100, 50, 0.25)</code> 将会产生的递归调用次数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">binomial</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span> k, <span class="keyword">double</span> p)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (N == <span class="number">0</span> &amp;&amp; k == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1.0</span>;</div><div class="line"><span class="keyword">if</span> (N &lt; <span class="number">0</span> || k &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0.0</span>;</div><div class="line"><span class="keyword">return</span> (<span class="number">1.0</span> - p) * binomial(N - <span class="number">1</span>, k ,p) + p * binomial(N - <span class="number">1</span>, k - <span class="number">1</span>, p);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>将已经计算过的值保存在数组中并给出一个更好的实现</p><h4 id="一，分析递归调用的次数"><a href="#一，分析递归调用的次数" class="headerlink" title="一，分析递归调用的次数"></a>一，分析递归调用的次数</h4><p>假设 <code>N = 3, k = 2, p = 0.75</code>, 分析函数的执行路径，我们可以得到函数首先不断的进入左侧的 <code>(1.0 - p) * binomial(N - 1, k ,p)</code> 表达式中, <code>k</code> 不变而 <code>N</code> 一直递减, 直到 <code>if (N &lt; 0 || k &lt; 0) return 0.0</code> 返回 0.0 为止，才开始返回上一层函数，而在逐层返回的过程中，函数也在不断的进入右侧表达式 <code>p * binomial(N - 1, k - 1, p)</code>, 将上述执行路径化成图像如下:</p><p><img src="http://oy5xsz86v.bkt.clouddn.com/1.jpg" alt=""></p><p>所以 <code>N = 3, k = 2, p = 0.75</code> 时，该函数总共调用次数为 <code>23</code> 次，观察发现，这是一棵由一分裂二的树状结构，假如每个节点都完整分裂两次，可以得出这棵树结构高度和总节点的函数关系 <code>NodeCount(depth) = 2^(depth + 1) - 1</code>，举例来说，高度为<code>2</code>，那么总共是7个节点，如下图所示:</p><p><img src="http://oy5xsz86v.bkt.clouddn.com/2.jpg" alt=""></p><p>因此我们可以得到递归调用次数的上限是 <code>2^(N + 2) - 1</code>，用代码验证结论：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> p = <span class="number">0.8</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> N = <span class="number">1</span>; N &lt; <span class="number">10</span>; N++)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= N; k++) &#123;</div><div class="line">binomial(N, k, p);</div><div class="line">StdOut.println(<span class="string">"N = "</span> + N + <span class="string">"  k = "</span> + k);</div><div class="line">StdOut.println(<span class="string">"递归调用次数: "</span> + recursive_count);</div><div class="line">StdOut.println(<span class="string">"上限次数 : "</span> + (<span class="keyword">long</span>)(Math.pow(<span class="number">2</span>, N + <span class="number">2</span>) - <span class="number">1</span>));</div><div class="line">StdOut.println(<span class="string">"========================\n"</span>);</div><div class="line">recursive_count = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>控制台输出:</p><pre><code>N = 1  k = 0递归调用次数: 3上限次数 : 7========================N = 1  k = 1递归调用次数: 5上限次数 : 7========================...N = 7  k = 6递归调用次数: 495上限次数 : 511========================N = 7  k = 7递归调用次数: 509上限次数 : 511========================...N = 9  k = 7递归调用次数: 1953上限次数 : 2047========================N = 9  k = 8递归调用次数: 2027上限次数 : 2047========================N = 9  k = 9递归调用次数: 2045上限次数 : 2047========================</code></pre><p>据此估算出 <code>binomial(100, 50, 0.25)</code> 的递归调用次数上限为 <code>2^102 - 1</code></p><h4 id="二，更好的实现"><a href="#二，更好的实现" class="headerlink" title="二，更好的实现"></a>二，更好的实现</h4><p>每传入一个新的 <code>N</code>，都要回过头把已经算过数遍的 <code>binomal(N - 1 ... )</code> 重新再算一遍，从上述图中可看出，<code>binomial(-1, 1...)</code> 和 <code>binomial(-1, 0...)</code> 重复计算了 <code>4</code> 次，<code>binomial(0, 1...)</code> 和 <code>binomial(0, 0...)</code> 重复计算了 <code>3</code> 次，递归调用造成大量计算的浪费，我们考虑使用一个数组，来存储已经计算过的值，当使用需要先前结果的计算时，可以直接从数组中取用。那么，使用数组存储结果，亦步亦趋的计算需要解决这么两个问题:</p><h5 id="1，为数组分配多大容量"><a href="#1，为数组分配多大容量" class="headerlink" title="1，为数组分配多大容量 ?"></a>1，为数组分配多大容量 ?</h5><p> 对于 <code>(N, k)</code> 左侧递归会在 <code>N = 0</code> 时终止（忽略最后一步 <code>N = -1</code> ），而右侧递归会在 <code>k = 0</code> 时达到最右树枝的极限长度，所以我们可以考虑分配 <code>double[N + 1][k + 1]</code> 的数组容量。</p><h5 id="2，初始值如何设置"><a href="#2，初始值如何设置" class="headerlink" title="2，初始值如何设置"></a>2，初始值如何设置</h5><p>在上述图中可以观察到，凡是 <code>(N, k)</code> 为 <code>(N, 0)</code> 形式的调用，总会在左侧递归中随着 <code>N</code> 递减，达到 <code>(0, 0)</code> 时函数第一次返回，在返回后过程中每次都陷入右侧递归，因为右侧递归需要 <code>k</code> 递减，而递归终止条件规定 <code>if (N &lt; 0 || k &lt; 0) return 0.0</code> 所以随着左侧递归每次返回而调用的第一次右侧递归，会因为 <code>k &lt; 0</code> 而立即返回，不会再有第二个以及往后的递归，并且返回的结果为 <code>0.0</code>,<br>然而加一个0，其实等于啥都没干，所以我们忽略右侧递归，而把 <code>(N, 0)</code> 形式简单看作只在右侧递归深入并逐层返回的过程，再进一步，忽略最后一步递归终止条件，即 <code>N = -1</code>, 得出 <code>(N, 0)</code> 执行深度为 <code>N + 1</code>。再来考察 <code>(N, k)</code> 为 <code>(0, k)</code> 形式的调用,因为无论是右侧递归还是左侧递归，在下一次递归中都会因为 <code>N &lt; 0</code> 而终止，所以凡是 <code>(0, k)</code> 的结果都为 <code>0</code>。</p><p>综上所属得出代码:<br><a href="https://github.com/YangXiaoHei/Algorithms4/blob/master/src/第一章_基础编程模型/Practise_1_1_27.java" target="_blank" rel="external">Github: Algorithms4_1.1.27</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 描述: &lt;code&gt;二项分布&lt;/code&gt; 估计用以下代码计算 &lt;code&gt;binomial(100, 50, 0.25)&lt;/code&gt; 将会产生的递归调用次数：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
      <category term="Algorithms4" scheme="http://yoursite.com/categories/Algorithms4/"/>
    
    
  </entry>
  
</feed>
